// automatically generated by rust-bindgen

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSContextGroup([u8; 0]);
pub type JSContextGroupRef = *const OpaqueJSContextGroup;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSContext([u8; 0]);
pub type JSContextRef = *const OpaqueJSContext;
pub type JSGlobalContextRef = *mut OpaqueJSContext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSString([u8; 0]);
pub type JSStringRef = *mut OpaqueJSString;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSClass([u8; 0]);
pub type JSClassRef = *mut OpaqueJSClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSPropertyNameArray([u8; 0]);
pub type JSPropertyNameArrayRef = *mut OpaqueJSPropertyNameArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSPropertyNameAccumulator([u8; 0]);
pub type JSPropertyNameAccumulatorRef = *mut OpaqueJSPropertyNameAccumulator;
pub type JSTypedArrayBytesDeallocator =
    ::std::option::Option<unsafe extern "C" fn(bytes:
                                                   *mut ::std::os::raw::c_void,
                                               deallocatorContext:
                                                   *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSValue([u8; 0]);
pub type JSValueRef = *const OpaqueJSValue;
pub type JSObjectRef = *mut OpaqueJSValue;
extern "C" {
    pub fn JSEvaluateScript(ctx: JSContextRef,
                            script: JSStringRef,
                            thisObject: JSObjectRef,
                            sourceURL: JSStringRef,
                            startingLineNumber: ::std::os::raw::c_int,
                            exception: *mut JSValueRef)
                            -> JSValueRef;
}
extern "C" {
    pub fn JSCheckScriptSyntax(ctx: JSContextRef,
                               script: JSStringRef,
                               sourceURL: JSStringRef,
                               startingLineNumber: ::std::os::raw::c_int,
                               exception: *mut JSValueRef)
                               -> bool;
}
extern "C" {
    pub fn JSGarbageCollect(ctx: JSContextRef);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum JSType {
    kJSTypeUndefined = 0,
    kJSTypeNull = 1,
    kJSTypeBoolean = 2,
    kJSTypeNumber = 3,
    kJSTypeString = 4,
    kJSTypeObject = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum JSTypedArrayType {
    kJSTypedArrayTypeInt8Array = 0,
    kJSTypedArrayTypeInt16Array = 1,
    kJSTypedArrayTypeInt32Array = 2,
    kJSTypedArrayTypeUint8Array = 3,
    kJSTypedArrayTypeUint8ClampedArray = 4,
    kJSTypedArrayTypeUint16Array = 5,
    kJSTypedArrayTypeUint32Array = 6,
    kJSTypedArrayTypeFloat32Array = 7,
    kJSTypedArrayTypeFloat64Array = 8,
    kJSTypedArrayTypeArrayBuffer = 9,
    kJSTypedArrayTypeNone = 10,
}
extern "C" {
    pub fn JSValueGetType(ctx: JSContextRef, arg1: JSValueRef) -> JSType;
}
extern "C" {
    pub fn JSValueIsUndefined(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueIsNull(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueIsBoolean(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueIsNumber(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueIsString(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueIsObject(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueIsObjectOfClass(ctx: JSContextRef,
                                  value: JSValueRef,
                                  jsClass: JSClassRef)
                                  -> bool;
}
extern "C" {
    pub fn JSValueIsArray(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueIsDate(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueGetTypedArrayType(ctx: JSContextRef,
                                    value: JSValueRef,
                                    exception: *mut JSValueRef)
                                    -> JSTypedArrayType;
}
extern "C" {
    pub fn JSValueIsEqual(ctx: JSContextRef,
                          a: JSValueRef,
                          b: JSValueRef,
                          exception: *mut JSValueRef)
                          -> bool;
}
extern "C" {
    pub fn JSValueIsStrictEqual(ctx: JSContextRef, a: JSValueRef, b: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueIsInstanceOfConstructor(ctx: JSContextRef,
                                          value: JSValueRef,
                                          constructor: JSObjectRef,
                                          exception: *mut JSValueRef)
                                          -> bool;
}
extern "C" {
    pub fn JSValueMakeUndefined(ctx: JSContextRef) -> JSValueRef;
}
extern "C" {
    pub fn JSValueMakeNull(ctx: JSContextRef) -> JSValueRef;
}
extern "C" {
    pub fn JSValueMakeBoolean(ctx: JSContextRef, boolean: bool) -> JSValueRef;
}
extern "C" {
    pub fn JSValueMakeNumber(ctx: JSContextRef, number: f64) -> JSValueRef;
}
extern "C" {
    pub fn JSValueMakeString(ctx: JSContextRef, string: JSStringRef) -> JSValueRef;
}
extern "C" {
    pub fn JSValueMakeFromJSONString(ctx: JSContextRef, string: JSStringRef) -> JSValueRef;
}
extern "C" {
    pub fn JSValueCreateJSONString(ctx: JSContextRef,
                                   value: JSValueRef,
                                   indent: ::std::os::raw::c_uint,
                                   exception: *mut JSValueRef)
                                   -> JSStringRef;
}
extern "C" {
    pub fn JSValueToBoolean(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueToNumber(ctx: JSContextRef,
                           value: JSValueRef,
                           exception: *mut JSValueRef)
                           -> f64;
}
extern "C" {
    pub fn JSValueToStringCopy(ctx: JSContextRef,
                               value: JSValueRef,
                               exception: *mut JSValueRef)
                               -> JSStringRef;
}
extern "C" {
    pub fn JSValueToObject(ctx: JSContextRef,
                           value: JSValueRef,
                           exception: *mut JSValueRef)
                           -> JSObjectRef;
}
extern "C" {
    pub fn JSValueProtect(ctx: JSContextRef, value: JSValueRef);
}
extern "C" {
    pub fn JSValueUnprotect(ctx: JSContextRef, value: JSValueRef);
}
pub type JSPropertyAttributes = ::std::os::raw::c_uint;
pub type JSClassAttributes = ::std::os::raw::c_uint;
pub type JSObjectInitializeCallback =
    ::std::option::Option<unsafe extern "C" fn(ctx: JSContextRef, object: JSObjectRef)>;
pub type JSObjectFinalizeCallback =
    ::std::option::Option<unsafe extern "C" fn(object: JSObjectRef)>;
pub type JSObjectHasPropertyCallback =
    ::std::option::Option<unsafe extern "C" fn(ctx: JSContextRef,
                                                 object: JSObjectRef,
                                                 propertyName: JSStringRef)
                                                 -> bool>;
pub type JSObjectGetPropertyCallback =
    ::std::option::Option<unsafe extern "C" fn(ctx: JSContextRef,
                                                 object: JSObjectRef,
                                                 propertyName: JSStringRef,
                                                 exception: *mut JSValueRef)
                                                 -> *const OpaqueJSValue>;
pub type JSObjectSetPropertyCallback =
    ::std::option::Option<unsafe extern "C" fn(ctx: JSContextRef,
                                                 object: JSObjectRef,
                                                 propertyName: JSStringRef,
                                                 value: JSValueRef,
                                                 exception: *mut JSValueRef)
                                                 -> bool>;
pub type JSObjectDeletePropertyCallback =
    ::std::option::Option<unsafe extern "C" fn(ctx: JSContextRef,
                                                 object: JSObjectRef,
                                                 propertyName: JSStringRef,
                                                 exception: *mut JSValueRef)
                                                 -> bool>;
pub type JSObjectGetPropertyNamesCallback =
    ::std::option::Option<unsafe extern "C" fn(ctx: JSContextRef,
                                                 object: JSObjectRef,
                                                 propertyNames: JSPropertyNameAccumulatorRef)>;
pub type JSObjectCallAsFunctionCallback =
    ::std::option::Option<unsafe extern "C" fn(ctx: JSContextRef,
                                                 function: JSObjectRef,
                                                 thisObject: JSObjectRef,
                                                 argumentCount: usize,
                                                 arguments: *const JSValueRef,
                                                 exception: *mut JSValueRef)
                                                 -> *const OpaqueJSValue>;
pub type JSObjectCallAsConstructorCallback =
    ::std::option::Option<unsafe extern "C" fn(ctx: JSContextRef,
                                                 constructor: JSObjectRef,
                                                 argumentCount: usize,
                                                 arguments: *const JSValueRef,
                                                 exception: *mut JSValueRef)
                                                 -> *mut OpaqueJSValue>;
pub type JSObjectHasInstanceCallback =
    ::std::option::Option<unsafe extern "C" fn(ctx: JSContextRef,
                                                 constructor: JSObjectRef,
                                                 possibleInstance: JSValueRef,
                                                 exception: *mut JSValueRef)
                                                 -> bool>;
pub type JSObjectConvertToTypeCallback =
    ::std::option::Option<unsafe extern "C" fn(ctx: JSContextRef,
                                                 object: JSObjectRef,
                                                 type_: JSType,
                                                 exception: *mut JSValueRef)
                                                 -> *const OpaqueJSValue>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct JSStaticValue {
    pub name: *const ::std::os::raw::c_char,
    pub getProperty: JSObjectGetPropertyCallback,
    pub setProperty: JSObjectSetPropertyCallback,
    pub attributes: JSPropertyAttributes,
}
#[test]
fn bindgen_test_layout_JSStaticValue() {
    assert_eq!(::std::mem::size_of::<JSStaticValue>(),
               32usize,
               concat!("Size of: ", stringify!(JSStaticValue)));
    assert_eq!(::std::mem::align_of::<JSStaticValue>(),
               8usize,
               concat!("Alignment of ", stringify!(JSStaticValue)));
    assert_eq!(unsafe { &(*(0 as *const JSStaticValue)).name as *const _ as usize },
               0usize,
               concat!("Alignment of field: ",
                       stringify!(JSStaticValue),
                       "::",
                       stringify!(name)));
    assert_eq!(unsafe { &(*(0 as *const JSStaticValue)).getProperty as *const _ as usize },
               8usize,
               concat!("Alignment of field: ",
                       stringify!(JSStaticValue),
                       "::",
                       stringify!(getProperty)));
    assert_eq!(unsafe { &(*(0 as *const JSStaticValue)).setProperty as *const _ as usize },
               16usize,
               concat!("Alignment of field: ",
                       stringify!(JSStaticValue),
                       "::",
                       stringify!(setProperty)));
    assert_eq!(unsafe { &(*(0 as *const JSStaticValue)).attributes as *const _ as usize },
               24usize,
               concat!("Alignment of field: ",
                       stringify!(JSStaticValue),
                       "::",
                       stringify!(attributes)));
}
impl Clone for JSStaticValue {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct JSStaticFunction {
    pub name: *const ::std::os::raw::c_char,
    pub callAsFunction: JSObjectCallAsFunctionCallback,
    pub attributes: JSPropertyAttributes,
}
#[test]
fn bindgen_test_layout_JSStaticFunction() {
    assert_eq!(::std::mem::size_of::<JSStaticFunction>(),
               24usize,
               concat!("Size of: ", stringify!(JSStaticFunction)));
    assert_eq!(::std::mem::align_of::<JSStaticFunction>(),
               8usize,
               concat!("Alignment of ", stringify!(JSStaticFunction)));
    assert_eq!(unsafe { &(*(0 as *const JSStaticFunction)).name as *const _ as usize },
               0usize,
               concat!("Alignment of field: ",
                       stringify!(JSStaticFunction),
                       "::",
                       stringify!(name)));
    assert_eq!(unsafe { &(*(0 as *const JSStaticFunction)).callAsFunction as *const _ as usize },
               8usize,
               concat!("Alignment of field: ",
                       stringify!(JSStaticFunction),
                       "::",
                       stringify!(callAsFunction)));
    assert_eq!(unsafe { &(*(0 as *const JSStaticFunction)).attributes as *const _ as usize },
               16usize,
               concat!("Alignment of field: ",
                       stringify!(JSStaticFunction),
                       "::",
                       stringify!(attributes)));
}
impl Clone for JSStaticFunction {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct JSClassDefinition {
    pub version: ::std::os::raw::c_int,
    pub attributes: JSClassAttributes,
    pub className: *const ::std::os::raw::c_char,
    pub parentClass: JSClassRef,
    pub staticValues: *const JSStaticValue,
    pub staticFunctions: *const JSStaticFunction,
    pub initialize: JSObjectInitializeCallback,
    pub finalize: JSObjectFinalizeCallback,
    pub hasProperty: JSObjectHasPropertyCallback,
    pub getProperty: JSObjectGetPropertyCallback,
    pub setProperty: JSObjectSetPropertyCallback,
    pub deleteProperty: JSObjectDeletePropertyCallback,
    pub getPropertyNames: JSObjectGetPropertyNamesCallback,
    pub callAsFunction: JSObjectCallAsFunctionCallback,
    pub callAsConstructor: JSObjectCallAsConstructorCallback,
    pub hasInstance: JSObjectHasInstanceCallback,
    pub convertToType: JSObjectConvertToTypeCallback,
}
#[test]
fn bindgen_test_layout_JSClassDefinition() {
    assert_eq!(::std::mem::size_of::<JSClassDefinition>(),
               128usize,
               concat!("Size of: ", stringify!(JSClassDefinition)));
    assert_eq!(::std::mem::align_of::<JSClassDefinition>(),
               8usize,
               concat!("Alignment of ", stringify!(JSClassDefinition)));
    assert_eq!(unsafe { &(*(0 as *const JSClassDefinition)).version as *const _ as usize },
               0usize,
               concat!("Alignment of field: ",
                       stringify!(JSClassDefinition),
                       "::",
                       stringify!(version)));
    assert_eq!(unsafe { &(*(0 as *const JSClassDefinition)).attributes as *const _ as usize },
               4usize,
               concat!("Alignment of field: ",
                       stringify!(JSClassDefinition),
                       "::",
                       stringify!(attributes)));
    assert_eq!(unsafe { &(*(0 as *const JSClassDefinition)).className as *const _ as usize },
               8usize,
               concat!("Alignment of field: ",
                       stringify!(JSClassDefinition),
                       "::",
                       stringify!(className)));
    assert_eq!(unsafe { &(*(0 as *const JSClassDefinition)).parentClass as *const _ as usize },
               16usize,
               concat!("Alignment of field: ",
                       stringify!(JSClassDefinition),
                       "::",
                       stringify!(parentClass)));
    assert_eq!(unsafe { &(*(0 as *const JSClassDefinition)).staticValues as *const _ as usize },
               24usize,
               concat!("Alignment of field: ",
                       stringify!(JSClassDefinition),
                       "::",
                       stringify!(staticValues)));
    assert_eq!(unsafe { &(*(0 as *const JSClassDefinition)).staticFunctions as *const _ as usize },
               32usize,
               concat!("Alignment of field: ",
                       stringify!(JSClassDefinition),
                       "::",
                       stringify!(staticFunctions)));
    assert_eq!(unsafe { &(*(0 as *const JSClassDefinition)).initialize as *const _ as usize },
               40usize,
               concat!("Alignment of field: ",
                       stringify!(JSClassDefinition),
                       "::",
                       stringify!(initialize)));
    assert_eq!(unsafe { &(*(0 as *const JSClassDefinition)).finalize as *const _ as usize },
               48usize,
               concat!("Alignment of field: ",
                       stringify!(JSClassDefinition),
                       "::",
                       stringify!(finalize)));
    assert_eq!(unsafe { &(*(0 as *const JSClassDefinition)).hasProperty as *const _ as usize },
               56usize,
               concat!("Alignment of field: ",
                       stringify!(JSClassDefinition),
                       "::",
                       stringify!(hasProperty)));
    assert_eq!(unsafe { &(*(0 as *const JSClassDefinition)).getProperty as *const _ as usize },
               64usize,
               concat!("Alignment of field: ",
                       stringify!(JSClassDefinition),
                       "::",
                       stringify!(getProperty)));
    assert_eq!(unsafe { &(*(0 as *const JSClassDefinition)).setProperty as *const _ as usize },
               72usize,
               concat!("Alignment of field: ",
                       stringify!(JSClassDefinition),
                       "::",
                       stringify!(setProperty)));
    assert_eq!(unsafe { &(*(0 as *const JSClassDefinition)).deleteProperty as *const _ as usize },
               80usize,
               concat!("Alignment of field: ",
                       stringify!(JSClassDefinition),
                       "::",
                       stringify!(deleteProperty)));
    assert_eq!(unsafe {
                   &(*(0 as *const JSClassDefinition)).getPropertyNames as *const _ as usize
               },
               88usize,
               concat!("Alignment of field: ",
                       stringify!(JSClassDefinition),
                       "::",
                       stringify!(getPropertyNames)));
    assert_eq!(unsafe { &(*(0 as *const JSClassDefinition)).callAsFunction as *const _ as usize },
               96usize,
               concat!("Alignment of field: ",
                       stringify!(JSClassDefinition),
                       "::",
                       stringify!(callAsFunction)));
    assert_eq!(unsafe {
                   &(*(0 as *const JSClassDefinition)).callAsConstructor as *const _ as usize
               },
               104usize,
               concat!("Alignment of field: ",
                       stringify!(JSClassDefinition),
                       "::",
                       stringify!(callAsConstructor)));
    assert_eq!(unsafe { &(*(0 as *const JSClassDefinition)).hasInstance as *const _ as usize },
               112usize,
               concat!("Alignment of field: ",
                       stringify!(JSClassDefinition),
                       "::",
                       stringify!(hasInstance)));
    assert_eq!(unsafe { &(*(0 as *const JSClassDefinition)).convertToType as *const _ as usize },
               120usize,
               concat!("Alignment of field: ",
                       stringify!(JSClassDefinition),
                       "::",
                       stringify!(convertToType)));
}
impl Clone for JSClassDefinition {
    fn clone(&self) -> Self {
        *self
    }
}
extern "C" {
    pub fn JSClassCreate(definition: *const JSClassDefinition) -> JSClassRef;
}
extern "C" {
    pub fn JSClassRetain(jsClass: JSClassRef) -> JSClassRef;
}
extern "C" {
    pub fn JSClassRelease(jsClass: JSClassRef);
}
extern "C" {
    pub fn JSObjectMake(ctx: JSContextRef,
                        jsClass: JSClassRef,
                        data: *mut ::std::os::raw::c_void)
                        -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeFunctionWithCallback(ctx: JSContextRef,
                                            name: JSStringRef,
                                            callAsFunction: JSObjectCallAsFunctionCallback)
                                            -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeConstructor(ctx: JSContextRef,
                                   jsClass: JSClassRef,
                                   callAsConstructor: JSObjectCallAsConstructorCallback)
                                   -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeArray(ctx: JSContextRef,
                             argumentCount: usize,
                             arguments: *const JSValueRef,
                             exception: *mut JSValueRef)
                             -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeDate(ctx: JSContextRef,
                            argumentCount: usize,
                            arguments: *const JSValueRef,
                            exception: *mut JSValueRef)
                            -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeError(ctx: JSContextRef,
                             argumentCount: usize,
                             arguments: *const JSValueRef,
                             exception: *mut JSValueRef)
                             -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeRegExp(ctx: JSContextRef,
                              argumentCount: usize,
                              arguments: *const JSValueRef,
                              exception: *mut JSValueRef)
                              -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeFunction(ctx: JSContextRef,
                                name: JSStringRef,
                                parameterCount: ::std::os::raw::c_uint,
                                parameterNames: *const JSStringRef,
                                body: JSStringRef,
                                sourceURL: JSStringRef,
                                startingLineNumber: ::std::os::raw::c_int,
                                exception: *mut JSValueRef)
                                -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectGetPrototype(ctx: JSContextRef, object: JSObjectRef) -> JSValueRef;
}
extern "C" {
    pub fn JSObjectSetPrototype(ctx: JSContextRef, object: JSObjectRef, value: JSValueRef);
}
extern "C" {
    pub fn JSObjectHasProperty(ctx: JSContextRef,
                               object: JSObjectRef,
                               propertyName: JSStringRef)
                               -> bool;
}
extern "C" {
    pub fn JSObjectGetProperty(ctx: JSContextRef,
                               object: JSObjectRef,
                               propertyName: JSStringRef,
                               exception: *mut JSValueRef)
                               -> JSValueRef;
}
extern "C" {
    pub fn JSObjectSetProperty(ctx: JSContextRef,
                               object: JSObjectRef,
                               propertyName: JSStringRef,
                               value: JSValueRef,
                               attributes: JSPropertyAttributes,
                               exception: *mut JSValueRef);
}
extern "C" {
    pub fn JSObjectDeleteProperty(ctx: JSContextRef,
                                  object: JSObjectRef,
                                  propertyName: JSStringRef,
                                  exception: *mut JSValueRef)
                                  -> bool;
}
extern "C" {
    pub fn JSObjectGetPropertyAtIndex(ctx: JSContextRef,
                                      object: JSObjectRef,
                                      propertyIndex: ::std::os::raw::c_uint,
                                      exception: *mut JSValueRef)
                                      -> JSValueRef;
}
extern "C" {
    pub fn JSObjectSetPropertyAtIndex(ctx: JSContextRef,
                                      object: JSObjectRef,
                                      propertyIndex: ::std::os::raw::c_uint,
                                      value: JSValueRef,
                                      exception: *mut JSValueRef);
}
extern "C" {
    pub fn JSObjectGetPrivate(object: JSObjectRef) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn JSObjectSetPrivate(object: JSObjectRef, data: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn JSObjectIsFunction(ctx: JSContextRef, object: JSObjectRef) -> bool;
}
extern "C" {
    pub fn JSObjectCallAsFunction(ctx: JSContextRef,
                                  object: JSObjectRef,
                                  thisObject: JSObjectRef,
                                  argumentCount: usize,
                                  arguments: *const JSValueRef,
                                  exception: *mut JSValueRef)
                                  -> JSValueRef;
}
extern "C" {
    pub fn JSObjectIsConstructor(ctx: JSContextRef, object: JSObjectRef) -> bool;
}
extern "C" {
    pub fn JSObjectCallAsConstructor(ctx: JSContextRef,
                                     object: JSObjectRef,
                                     argumentCount: usize,
                                     arguments: *const JSValueRef,
                                     exception: *mut JSValueRef)
                                     -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectCopyPropertyNames(ctx: JSContextRef,
                                     object: JSObjectRef)
                                     -> JSPropertyNameArrayRef;
}
extern "C" {
    pub fn JSPropertyNameArrayRetain(array: JSPropertyNameArrayRef) -> JSPropertyNameArrayRef;
}
extern "C" {
    pub fn JSPropertyNameArrayRelease(array: JSPropertyNameArrayRef);
}
extern "C" {
    pub fn JSPropertyNameArrayGetCount(array: JSPropertyNameArrayRef) -> usize;
}
extern "C" {
    pub fn JSPropertyNameArrayGetNameAtIndex(array: JSPropertyNameArrayRef,
                                             index: usize)
                                             -> JSStringRef;
}
extern "C" {
    pub fn JSPropertyNameAccumulatorAddName(accumulator: JSPropertyNameAccumulatorRef,
                                            propertyName: JSStringRef);
}
extern "C" {
    pub fn JSContextGroupCreate() -> JSContextGroupRef;
}
extern "C" {
    pub fn JSContextGroupRetain(group: JSContextGroupRef) -> JSContextGroupRef;
}
extern "C" {
    pub fn JSContextGroupRelease(group: JSContextGroupRef);
}
extern "C" {
    pub fn JSGlobalContextCreate(globalObjectClass: JSClassRef) -> JSGlobalContextRef;
}
extern "C" {
    pub fn JSGlobalContextCreateInGroup(group: JSContextGroupRef,
                                        globalObjectClass: JSClassRef)
                                        -> JSGlobalContextRef;
}
extern "C" {
    pub fn JSGlobalContextRetain(ctx: JSGlobalContextRef) -> JSGlobalContextRef;
}
extern "C" {
    pub fn JSGlobalContextRelease(ctx: JSGlobalContextRef);
}
extern "C" {
    pub fn JSContextGetGlobalObject(ctx: JSContextRef) -> JSObjectRef;
}
extern "C" {
    pub fn JSContextGetGroup(ctx: JSContextRef) -> JSContextGroupRef;
}
extern "C" {
    pub fn JSContextGetGlobalContext(ctx: JSContextRef) -> JSGlobalContextRef;
}
extern "C" {
    pub fn JSGlobalContextCopyName(ctx: JSGlobalContextRef) -> JSStringRef;
}
extern "C" {
    pub fn JSGlobalContextSetName(ctx: JSGlobalContextRef, name: JSStringRef);
}
pub type JSChar = ::std::os::raw::c_ushort;
extern "C" {
    pub fn JSStringCreateWithCharacters(chars: *const JSChar, numChars: usize) -> JSStringRef;
}
extern "C" {
    pub fn JSStringCreateWithUTF8CString(string: *const ::std::os::raw::c_char) -> JSStringRef;
}
extern "C" {
    pub fn JSStringRetain(string: JSStringRef) -> JSStringRef;
}
extern "C" {
    pub fn JSStringRelease(string: JSStringRef);
}
extern "C" {
    pub fn JSStringGetLength(string: JSStringRef) -> usize;
}
extern "C" {
    pub fn JSStringGetCharactersPtr(string: JSStringRef) -> *const JSChar;
}
extern "C" {
    pub fn JSStringGetMaximumUTF8CStringSize(string: JSStringRef) -> usize;
}
extern "C" {
    pub fn JSStringGetUTF8CString(string: JSStringRef,
                                  buffer: *mut ::std::os::raw::c_char,
                                  bufferSize: usize)
                                  -> usize;
}
extern "C" {
    pub fn JSStringIsEqual(a: JSStringRef, b: JSStringRef) -> bool;
}
extern "C" {
    pub fn JSStringIsEqualToUTF8CString(a: JSStringRef, b: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn JSObjectMakeTypedArray(ctx: JSContextRef,
                                  arrayType: JSTypedArrayType,
                                  length: usize,
                                  exception: *mut JSValueRef)
                                  -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeTypedArrayWithBytesNoCopy(ctx: JSContextRef,
                                                 arrayType: JSTypedArrayType,
                                                 bytes: *mut ::std::os::raw::c_void,
                                                 byteLength: usize,
                                                 bytesDeallocator: JSTypedArrayBytesDeallocator,
                                                 deallocatorContext: *mut ::std::os::raw::c_void,
                                                 exception: *mut JSValueRef)
                                                 -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeTypedArrayWithArrayBuffer(ctx: JSContextRef,
                                                 arrayType: JSTypedArrayType,
                                                 buffer: JSObjectRef,
                                                 exception: *mut JSValueRef)
                                                 -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeTypedArrayWithArrayBufferAndOffset(ctx: JSContextRef,
                                                          arrayType: JSTypedArrayType,
                                                          buffer: JSObjectRef,
                                                          byteOffset: usize,
                                                          length: usize,
                                                          exception: *mut JSValueRef)
                                                          -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectGetTypedArrayBytesPtr(ctx: JSContextRef,
                                         object: JSObjectRef,
                                         exception: *mut JSValueRef)
                                         -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn JSObjectGetTypedArrayLength(ctx: JSContextRef,
                                       object: JSObjectRef,
                                       exception: *mut JSValueRef)
                                       -> usize;
}
extern "C" {
    pub fn JSObjectGetTypedArrayByteLength(ctx: JSContextRef,
                                           object: JSObjectRef,
                                           exception: *mut JSValueRef)
                                           -> usize;
}
extern "C" {
    pub fn JSObjectGetTypedArrayByteOffset(ctx: JSContextRef,
                                           object: JSObjectRef,
                                           exception: *mut JSValueRef)
                                           -> usize;
}
extern "C" {
    pub fn JSObjectGetTypedArrayBuffer(ctx: JSContextRef,
                                       object: JSObjectRef,
                                       exception: *mut JSValueRef)
                                       -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeArrayBufferWithBytesNoCopy(ctx: JSContextRef,
                                                  bytes: *mut ::std::os::raw::c_void,
                                                  byteLength: usize,
                                                  bytesDeallocator: JSTypedArrayBytesDeallocator,
                                                  deallocatorContext: *mut ::std::os::raw::c_void,
                                                  exception: *mut JSValueRef)
                                                  -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectGetArrayBufferBytesPtr(ctx: JSContextRef,
                                          object: JSObjectRef,
                                          exception: *mut JSValueRef)
                                          -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn JSObjectGetArrayBufferByteLength(ctx: JSContextRef,
                                            object: JSObjectRef,
                                            exception: *mut JSValueRef)
                                            -> usize;
}
